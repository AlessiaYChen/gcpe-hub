// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gcpe.Hub.Services.Legacy
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Subscribe.
    /// </summary>
    public static partial class SubscribeExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<KeyValuePairStringString> ConfigurationValues(this ISubscribe operations)
            {
                return operations.ConfigurationValuesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<KeyValuePairStringString>> ConfigurationValuesAsync(this ISubscribe operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfigurationValuesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static bool? CheckEmailActivationGuid(this ISubscribe operations, string guid)
            {
                return operations.CheckEmailActivationGuidAsync(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckEmailActivationGuidAsync(this ISubscribe operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckEmailActivationGuidWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            public static SubscriberInfo SubscriberInformation(this ISubscribe operations, string emailAddress)
            {
                return operations.SubscriberInformationAsync(emailAddress).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriberInfo> SubscriberInformationAsync(this ISubscribe operations, string emailAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscriberInformationWithHttpMessagesAsync(emailAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            public static void ManageNewsOnDemandEmailSubscription(this ISubscribe operations, string emailAddress)
            {
                operations.ManageNewsOnDemandEmailSubscriptionAsync(emailAddress).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageNewsOnDemandEmailSubscriptionAsync(this ISubscribe operations, string emailAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ManageNewsOnDemandEmailSubscriptionWithHttpMessagesAsync(emailAddress, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriberInfo'>
            /// </param>
            public static void CreateNewsOnDemandEmailSubscriptionWithPreferences(this ISubscribe operations, SubscriberInfo subscriberInfo)
            {
                operations.CreateNewsOnDemandEmailSubscriptionWithPreferencesAsync(subscriberInfo).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriberInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateNewsOnDemandEmailSubscriptionWithPreferencesAsync(this ISubscribe operations, SubscriberInfo subscriberInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateNewsOnDemandEmailSubscriptionWithPreferencesWithHttpMessagesAsync(subscriberInfo, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriberInfo'>
            /// </param>
            /// <param name='tokenOrEmail'>
            /// </param>
            public static void UpdateNewsOnDemandEmailSubscriptionWithPreferences(this ISubscribe operations, SubscriberInfo subscriberInfo, string tokenOrEmail)
            {
                operations.UpdateNewsOnDemandEmailSubscriptionWithPreferencesAsync(subscriberInfo, tokenOrEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriberInfo'>
            /// </param>
            /// <param name='tokenOrEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateNewsOnDemandEmailSubscriptionWithPreferencesAsync(this ISubscribe operations, SubscriberInfo subscriberInfo, string tokenOrEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateNewsOnDemandEmailSubscriptionWithPreferencesWithHttpMessagesAsync(subscriberInfo, tokenOrEmail, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkGuid'>
            /// </param>
            public static SubscriberInfo ConfirmUpdateCreateSubscription(this ISubscribe operations, System.Guid linkGuid)
            {
                return operations.ConfirmUpdateCreateSubscriptionAsync(linkGuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkGuid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriberInfo> ConfirmUpdateCreateSubscriptionAsync(this ISubscribe operations, System.Guid linkGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfirmUpdateCreateSubscriptionWithHttpMessagesAsync(linkGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tokenOrEmail'>
            /// </param>
            public static bool? UnsubscribeSubscriber(this ISubscribe operations, string tokenOrEmail)
            {
                return operations.UnsubscribeSubscriberAsync(tokenOrEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tokenOrEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UnsubscribeSubscriberAsync(this ISubscribe operations, string tokenOrEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnsubscribeSubscriberWithHttpMessagesAsync(tokenOrEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<KeyValuePairStringString> SubscriptionCategories(this ISubscribe operations)
            {
                return operations.SubscriptionCategoriesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<KeyValuePairStringString>> SubscriptionCategoriesAsync(this ISubscribe operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscriptionCategoriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryKey'>
            /// </param>
            public static IList<KeyValuePairStringString> SubscriptionItems(this ISubscribe operations, string categoryKey)
            {
                return operations.SubscriptionItemsAsync(categoryKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<KeyValuePairStringString>> SubscriptionItemsAsync(this ISubscribe operations, string categoryKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscriptionItemsWithHttpMessagesAsync(categoryKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> NewsroomFeeds(this ISubscribe operations)
            {
                return operations.NewsroomFeedsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> NewsroomFeedsAsync(this ISubscribe operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewsroomFeedsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<KeyValuePairStringString> NewsFeeds(this ISubscribe operations)
            {
                return operations.NewsFeedsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<KeyValuePairStringString>> NewsFeedsAsync(this ISubscribe operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewsFeedsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unverifiedPurgeVal'>
            /// </param>
            /// <param name='regularPurgeVal'>
            /// </param>
            /// <param name='lookBackDays'>
            /// </param>
            public static void PurgeNewsOnDemandSubscribers(this ISubscribe operations, int unverifiedPurgeVal, int regularPurgeVal, int lookBackDays)
            {
                operations.PurgeNewsOnDemandSubscribersAsync(unverifiedPurgeVal, regularPurgeVal, lookBackDays).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='unverifiedPurgeVal'>
            /// </param>
            /// <param name='regularPurgeVal'>
            /// </param>
            /// <param name='lookBackDays'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeNewsOnDemandSubscribersAsync(this ISubscribe operations, int unverifiedPurgeVal, int regularPurgeVal, int lookBackDays, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeNewsOnDemandSubscribersWithHttpMessagesAsync(unverifiedPurgeVal, regularPurgeVal, lookBackDays, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
